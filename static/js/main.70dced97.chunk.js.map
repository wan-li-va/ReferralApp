{"version":3,"sources":["components/Header.js","components/Dashboard/ProgressBar.js","components/Dashboard/ReferralDisplay.js","components/Dashboard/Rewards.js","components/Dashboard/Social.js","components/Dashboard/NextReward.js","components/Dashboard.js","Firebase.js","components/Login.js","components/AboutUs.js","components/FAQ.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","ProgressComponent","props","numReferrals","nextAchievement","pct","variant","message","left","ProgressBar","style","height","now","srOnly","label","ReferralDisplay","Rewards","Social","NextReward","Dashboard","componentDidMount","state","referralCode","rewards","hasShared","this","userID","code","Component","require","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","login","aboutUs","faq","App","path","component","AboutUs","FAQ","exact","Login","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.70dced97.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport '../styling/Header.css'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"Header\">\r\n            <h1 className=\"Title\">ReSHOE</h1> \r\n            <h4 className=\"Subtitle\">Responsibly Show Hoo Owns the Environment</h4>\r\n            <Link className=\"HeaderLink\" to=\"/ReferralApp/about\">About Us</Link>\r\n            <Link className=\"HeaderLink\" to=\"/ReferralApp/faq\">FAQ</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport ProgressBar from 'react-bootstrap/ProgressBar';\r\nimport './ProgressBar.css';\r\n\r\nconst ProgressComponent = (props) => {\r\n    const {\r\n        numReferrals,\r\n        nextAchievement\r\n    } = props;\r\n    let pct = (numReferrals / nextAchievement) * 100;\r\n    let variant = \"info\";\r\n    let message = (nextAchievement - numReferrals) + \" \";\r\n    let left = \"points left!\"\r\n    if (nextAchievement - numReferrals === 1) {\r\n        left = \"point left!\";\r\n    }\r\n    message += left;\r\n    if (pct >= 80) {\r\n        variant = \"success\";\r\n        message = \"Almost there! \" + message;\r\n\r\n    } else if (pct <= 20) {\r\n        variant = \"danger\"\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"labels\">\r\n                <a className=\"left-label\">0</a>\r\n                <a className=\"center-label\">{message}</a>\r\n                <a className=\"right-label\">{nextAchievement}</a>\r\n            </div>\r\n            <ProgressBar style={{ height: \"30px\" }} variant={variant} now={pct} srOnly label={numReferrals} />\r\n        </div>\r\n    );\r\n}\r\nexport default ProgressComponent;","import React from 'react';\r\n\r\nconst ReferralDisplay = () => {\r\n    return (\r\n        <div>Referral Display</div>\r\n    )\r\n}\r\nexport default ReferralDisplay;","import React from 'react'\r\n\r\nconst Rewards = () => {\r\n    return (\r\n        <div>Rewards</div>\r\n    )\r\n}\r\n\r\nexport default Rewards","import React from 'react'\r\n\r\nconst Social = () => {\r\n    return (\r\n        <div>Social</div>\r\n    );\r\n}\r\n\r\nexport default Social","import React from 'react'\r\n\r\nconst NextReward = () => {\r\n    return (\r\n        <div></div>\r\n    )\r\n}\r\nexport default NextReward;","import React, { Component } from 'react';\r\nimport ProgressBar from './Dashboard/ProgressBar.js';\r\nimport ReferralDisplay from './Dashboard/ReferralDisplay.js';\r\nimport Rewards from './Dashboard/Rewards.js';\r\nimport Social from './Dashboard/Social.js';\r\nimport NextReward from './Dashboard/NextReward.js';\r\n\r\nexport default class Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            numReferrals: 8,\r\n            nextAchievement: 10,\r\n            referralCode: \"\",\r\n            rewards: {},\r\n            hasShared: false,\r\n        }\r\n    }\r\n\r\n    /*  Person info\r\n        \"id\": {\r\n            referralCode,\r\n            numReferrals,\r\n            hasShared,\r\n            email,\r\n            name\r\n            //stretch: address, referrals\r\n        }\r\n    */\r\n\r\n    componentDidMount = () => {\r\n        /*\r\n        from firebase:\r\n        get current user\r\n            id\r\n        get data we need\r\n        */\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            userID\r\n        } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                Dashboard\r\n                <ProgressBar\r\n                    numReferrals={this.state.numReferrals}\r\n                    nextAchievement={this.state.nextAchievement} />\r\n                <ReferralDisplay code={this.state.referralCode} />\r\n                <Rewards rewards={this.state.rewards} />\r\n                <Social\r\n                    referralCode={this.state.referralCode}\r\n                    hasShared={this.state.hasShared} />\r\n                <NextReward\r\n                    nextAchievement={this.state.nextAchievement}\r\n                    rewards={this.state.rewards} />\r\n            </div>\r\n        )\r\n    }\r\n}","import firebase from \"firebase\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nrequire('dotenv').config();\r\nvar key = process.env.REACT_APP_KEY;\r\n\r\nconst config = {\r\n    apiKey: key,\r\n    authDomain: \"referralapp-9c02a.firebaseapp.com\",\r\n    databaseURL: \"https://referralapp-9c02a.firebaseio.com\",\r\n    projectId: \"referralapp-9c02a\",\r\n    storageBucket: \"referralapp-9c02a.appspot.com\",\r\n    messagingSenderId: \"120981071250\",\r\n    appId: \"1:120981071250:web:0f0cc797c9d2c8fe070d4b\",\r\n    measurementId: \"G-2EH3FEJGEZ\"\r\n};\r\n\r\nvar firebaseApp = firebase.initializeApp(config)\r\n\r\nexport default firebaseApp;","import React from 'react';\r\n\r\nconst login = () => {\r\n    return (\r\n        <div>Log in page</div>\r\n    )\r\n}\r\n\r\nexport default login","import React from 'react'\r\n\r\nconst aboutUs = () => {\r\n  return (\r\n    <div>About Us</div>\r\n  );\r\n}\r\nexport default aboutUs;","import React from 'react'\r\n\r\nconst faq = () => {\r\n  return (\r\n    <div>FAQ</div>\r\n  );\r\n}\r\nexport default faq;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header.js';\r\nimport Dashboard from './components/Dashboard.js';\r\nimport Firebase from './Firebase.js';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Login from './components/Login.js';\r\nimport AboutUs from './components/AboutUs.js';\r\nimport FAQ from './components/FAQ.js';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <Header />\r\n          <Switch>\r\n            <Route path=\"/ReferralApp/dashboard\" component={Dashboard} />\r\n            <Route path=\"/ReferralApp/about\" component={AboutUs} />\r\n            <Route path=\"/ReferralApp/faq\" component={FAQ} />\r\n            <Route path=\"/ReferralApp/\" exact >\r\n              <Login />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router >\r\n    );\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}